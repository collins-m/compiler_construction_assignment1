/* FrontEnd.java */
/* Generated By:JavaCC: Do not edit this line. FrontEnd.java */
    public class FrontEnd implements FrontEndConstants {

        public static void main(String[] args){

            FrontEnd parser;

            if (args.length == 0) {

                System.out.println("FrontEnd Parser: Reading from standard input . . .");
                parser = new FrontEnd(System.in);
                } else if (args.length == 1) {

                    System.out.println("FrontEnd Parser: Reading from file " + args[0] + " . . .");
                    try {

                        parser = new FrontEnd(new java.io.FileInputStream(args[0]));
                    } catch (java.io.FileNotFoundException e) {

                        System.out.println("FrontEnd Parser: File " + args[0] + " not found.");

                    return;
                }
            } else {

                    System.out.println("FrontEnd Parser: Usage is one of:");
                    System.out.println(" java FrontEndParser < inputfile");
                    System.out.println("OR");
                    System.out.println(" java FrontEndParser inputfile");

                    return;
            }
            try {

                parser.Program();
                System.out.println("SLP Parser: SLP program parsed successfully.");
                } catch (ParseException e) {

                System.out.println(e.getMessage());
                System.out.println("SLP Parser: Encountered errors during parse.");
            }
        }

  static final public void Program() throws ParseException {
    DeclList();
    FunctionList();
    Main();
    jj_consume_token(0);
  }

  static final public void DeclList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:
    case CONST:{
      Decl();
      jj_consume_token(SEMICOLON);
      DeclList();
      break;
      }
    default:
      jj_la1[0] = jj_gen;

    }
  }

  static final public void Decl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:{
      VarDecl();
      break;
      }
    case CONST:{
      ConstDecl();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void VarDecl() throws ParseException {
    jj_consume_token(VAR);
    jj_consume_token(ID);
    jj_consume_token(COLON);
    Type();
  }

  static final public void ConstDecl() throws ParseException {
    jj_consume_token(CONST);
    jj_consume_token(ID);
    jj_consume_token(COLON);
    Type();
    jj_consume_token(ASSIGN);
    Expression();
  }

  static final public void FunctionList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BOOLEAN:
    case VOID:
    case INTEGER:{
      Function();
      FunctionList();
      break;
      }
    default:
      jj_la1[2] = jj_gen;

    }
  }

  static final public void Function() throws ParseException {
    Type();
    jj_consume_token(ID);
    jj_consume_token(LEFT_PARENTHESIS);
    ParameterList();
    jj_consume_token(RIGHT_PARENTHESIS);
    jj_consume_token(LEFT_BRACE);
    DeclList();
    StatementBlock();
    jj_consume_token(RETURN);
    jj_consume_token(LEFT_PARENTHESIS);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:
    case FALSE:
    case LEFT_PARENTHESIS:
    case MINUS_SIGN:
    case NUMBER:
    case ID:{
      Expression();
      break;
      }
    default:
      jj_la1[3] = jj_gen;

    }
    jj_consume_token(RIGHT_PARENTHESIS);
    jj_consume_token(SEMICOLON);
    jj_consume_token(RIGHT_BRACE);
  }

  static final public void Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER:{
      jj_consume_token(INTEGER);
      break;
      }
    case BOOLEAN:{
      jj_consume_token(BOOLEAN);
      break;
      }
    case VOID:{
      jj_consume_token(VOID);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ParameterList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      NempParameterList();
      break;
      }
    default:
      jj_la1[5] = jj_gen;

    }
  }

  static final public void NempParameterList() throws ParseException {
    jj_consume_token(ID);
    jj_consume_token(COLON);
    Type();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      NempParameterList();
      break;
      }
    default:
      jj_la1[6] = jj_gen;

    }
  }

  static final public void Main() throws ParseException {
    jj_consume_token(MAIN);
    jj_consume_token(LEFT_BRACE);
    DeclList();
    StatementBlock();
    jj_consume_token(RIGHT_BRACE);
  }

  static final public void StatementBlock() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF:
    case WHILE:
    case SKP:
    case LEFT_BRACE:
    case ID:{
      Statement();
      StatementBlock();
      break;
      }
    default:
      jj_la1[7] = jj_gen;

    }
  }

  static final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        jj_consume_token(ASSIGN);
        Expression();
        jj_consume_token(SEMICOLON);
        break;
        }
      case LEFT_PARENTHESIS:{
        jj_consume_token(LEFT_PARENTHESIS);
        ArgList();
        jj_consume_token(RIGHT_PARENTHESIS);
        jj_consume_token(SEMICOLON);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case LEFT_BRACE:{
      jj_consume_token(LEFT_BRACE);
      StatementBlock();
      jj_consume_token(RIGHT_BRACE);
      break;
      }
    case IF:{
      jj_consume_token(IF);
      Condition();
      jj_consume_token(LEFT_BRACE);
      StatementBlock();
      jj_consume_token(RIGHT_BRACE);
      jj_consume_token(ELSE);
      jj_consume_token(LEFT_BRACE);
      StatementBlock();
      jj_consume_token(RIGHT_BRACE);
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      Condition();
      jj_consume_token(LEFT_BRACE);
      StatementBlock();
      jj_consume_token(RIGHT_BRACE);
      break;
      }
    case SKP:{
      jj_consume_token(SKP);
      jj_consume_token(SEMICOLON);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:
    case FALSE:
    case MINUS_SIGN:
    case NUMBER:
    case ID:{
      Fragment();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS_SIGN:
      case MINUS_SIGN:{
        BinaryArithOp();
        Fragment();
        break;
        }
      default:
        jj_la1[10] = jj_gen;

      }
      break;
      }
    case LEFT_PARENTHESIS:{
      jj_consume_token(LEFT_PARENTHESIS);
      Expression();
      jj_consume_token(RIGHT_PARENTHESIS);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void BinaryArithOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS_SIGN:{
      jj_consume_token(PLUS_SIGN);
      break;
      }
    case MINUS_SIGN:{
      jj_consume_token(MINUS_SIGN);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Fragment() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MINUS_SIGN:
    case ID:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MINUS_SIGN:{
        jj_consume_token(MINUS_SIGN);
        break;
        }
      default:
        jj_la1[13] = jj_gen;

      }
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFT_PARENTHESIS:{
        jj_consume_token(LEFT_PARENTHESIS);
        ArgList();
        jj_consume_token(RIGHT_PARENTHESIS);
        break;
        }
      default:
        jj_la1[14] = jj_gen;

      }
      FragmentPrime();
      break;
      }
    case NUMBER:{
      jj_consume_token(NUMBER);
      FragmentPrime();
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
      FragmentPrime();
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
      FragmentPrime();
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void FragmentPrime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS_SIGN:
    case MINUS_SIGN:{
      BinaryArithOp();
      Expression();
      FragmentPrime();
      break;
      }
    default:
      jj_la1[16] = jj_gen;

    }
  }

  static final public void Condition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TILDE:{
      jj_consume_token(TILDE);
      Condition();
      ConditionPrime();
      break;
      }
    case LEFT_PARENTHESIS:{
      jj_consume_token(LEFT_PARENTHESIS);
      Condition();
      jj_consume_token(RIGHT_PARENTHESIS);
      ConditionPrime();
      break;
      }
    case TRUE:
    case FALSE:
    case MINUS_SIGN:
    case NUMBER:
    case ID:{
      Fragment();
      CompOp();
      Expression();
      ConditionPrime();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ConditionPrime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OR:
    case AND:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        jj_consume_token(OR);
        break;
        }
      case AND:{
        jj_consume_token(AND);
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Condition();
      ConditionPrime();
      break;
      }
    default:
      jj_la1[19] = jj_gen;

    }
  }

  static final public void CompOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUIVALENT:{
      jj_consume_token(EQUIVALENT);
      break;
      }
    case NOTEQUIVALENT:{
      jj_consume_token(NOTEQUIVALENT);
      break;
      }
    case LESS_THAN:{
      jj_consume_token(LESS_THAN);
      break;
      }
    case LESS_THAN_EQUAL:{
      jj_consume_token(LESS_THAN_EQUAL);
      break;
      }
    case GREATER_THAN:{
      jj_consume_token(GREATER_THAN);
      break;
      }
    case GREATER_THAN_EQUAL:{
      jj_consume_token(GREATER_THAN_EQUAL);
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ArgList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      NempArgList();
      break;
      }
    default:
      jj_la1[21] = jj_gen;

    }
  }

  static final public void NempArgList() throws ParseException {
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      NempArgList();
      break;
      }
    default:
      jj_la1[22] = jj_gen;

    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public FrontEndTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x6,0x6,0x2030,0x900600,0x2030,0x0,0x4000,0x41880,0x120000,0x41880,0xc00000,0x900600,0xc00000,0x800000,0x100000,0x800600,0xc00000,0x1900600,0x6000000,0x6000000,0xf8000000,0x0,0x4000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x18,0x0,0x10,0x0,0x10,0x0,0x10,0x0,0x18,0x0,0x0,0x0,0x18,0x0,0x18,0x0,0x0,0x1,0x10,0x0,};
   }

  /** Constructor with InputStream. */
  public FrontEnd(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public FrontEnd(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FrontEndTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public FrontEnd(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FrontEndTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public FrontEnd(FrontEndTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(FrontEndTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[47];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 47; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

    }
